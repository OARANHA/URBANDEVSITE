name: Deploy urbanDev

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Ambiente para deploy'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging
        - development

env:
  NODE_VERSION: '18'
  REGISTRY: npm
  NODE_ENV: production

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Run type checking
        run: npm run lint

      - name: Run tests
        run: npm test
        if: always()

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    outputs:
      hash: ${{ steps.hash.outputs.hash }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client
        run: npm run db:generate

      - name: Build project
        run: npm run build

      - name: Generate hash
        id: hash
        run: echo "hash=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

  deploy-vercel:
    name: Deploy to Vercel
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    environment: production
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: Install Vercel CLI
        run: npm install -g vercel

      - name: Build project
        run: npm run build

      - name: Deploy to Vercel
        run: vercel --prod --name urbanDev-prod
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}

  deploy-render:
    name: Deploy to Render
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    environment: production
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Push to GitHub
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Trigger Render webhook
        run: |
          curl -X POST ${{ secrets.RENDER_WEBHOOK_URL }} \
            -H "Authorization: Bearer ${{ secrets.RENDER_TOKEN }}" \
            -H "Content-Type: application/json"
        if: env.RENDER_WEBHOOK_URL != ''

  deploy-vps:
    name: Deploy to VPS
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    environment: production
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.VPS_SSH_PRIVATE_KEY }}

      - name: Deploy to VPS
        run: |
          ssh -o StrictHostKeyChecking=no deploy@${{ secrets.VPS_IP }} << 'EOF'
            cd /var/www/urbanDev
            git pull origin main
            npm ci --only=production
            npm run build
            pm2 restart urbanDev
          EOF
        env:
          VPS_IP: ${{ secrets.VPS_IP }}

  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [build, deploy-vercel, deploy-render, deploy-vps]
    if: always() && (github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch')
    steps:
      - name: Notify deployment status
        run: |
          if [[ "${{ needs.build.result }}" == "success" ]]; then
            echo "✅ Build completed successfully"
          else
            echo "❌ Build failed"
          fi

          if [[ "${{ needs.deploy-vercel.result }}" == "success" ]]; then
            echo "✅ Vercel deployment completed"
          else
            echo "❌ Vercel deployment failed"
          fi

          if [[ "${{ needs.deploy-render.result }}" == "success" ]]; then
            echo "✅ Render deployment completed"
          else
            echo "❌ Render deployment failed"
          fi

          if [[ "${{ needs.deploy-vps.result }}" == "success" ]]; then
            echo "✅ VPS deployment completed"
          else
            echo "❌ VPS deployment failed"
          fi